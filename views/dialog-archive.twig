{% set pathbrowse = false %}
{% set multiselect = true %}
{% set multiselectFilesOnly = false %}

{% extends "flm::dialog-window.twig" %}
{% import "flm::dialog-window.twig" as window %}

{% block heading %}
    <legend>{{ theUILang.fDiagCArchiveSel }}</legend>
{% endblock %}

{% block content %}

    {{ window.pathBrowser(selectedTarget, theUILang.fDiagArchive) }}
    <fieldset>
        <legend>{{ theUILang.fDiagOptions }}</legend>
        <label style="float: left;"> {{ theUILang.fDiagCArchType }}
            <select name="fMan_archtype" id="fMan_archtype">

            </select>
        </label>
        <label style="float: left; margin-left: 10px;">
            {{ theUILang.fDiagCompression }}
            <select name="fman-archive-archcompr" id="fman-archive-archcompr"> </select>
        </label>
        <label style="float: right;" for="fman-archive-multiv" class="fman-archive-settings-rar">
            {{ theUILang.fDiagCArchVsize }}
            <input name="fman-archive-vsize" id="fman-archive-vsize" class="Textbox num1" type="text" value=""/>
        </label>

        <div>
            <label style="clear:both; float: left; display:none;"
                   class="fman-archive-settings-pass fman-archive-settings-rar">
                Password: <input name="fman-archive-apassword" class="TextboxLarge" type="text" value=""
                                 id="fman-archive-apassword"/>
            </label>

        </div>

    </fieldset>
    <div style="clear:both;"></div>
{% endblock %}

{% block scripts %}
    <script>
        (function (global) {
            console.log('dialog-archive');
            var dialogs = flm.ui.getDialogs();
            var diagId = dialogs.getDialogId();
            var settings = flm.getConfig().archives;

            var pathBrowser = dialogs.pathBrowserInput(diagId);
            var archiveType = $("#fMan_archtype");
            var compression = $("#fman-archive-archcompr");
            var password = $("#fman-archive-apassword");
            var volumeSize = $("#fman-archive-vsize");
            var format = $('#fman-archive-arcnscheme');

            if (!flm.manager.hasOwnProperty('doArchive')) {
                // service
                flm.manager.doArchive = function (archive, files, options) {

                    var hasError;

                    if (!archive.length) {
                        hasError = theUILang.fDiagNoPath;
                    } else if (!$type(files) || files.length === 0) {
                        hasError = theUILang.fErrMsg[22];
                    } else if (!flm.utils.isValidPath(archive)) {
                        hasError = theUILang.fDiagInvalidname;
                    }

                    if ($type(hasError)) {
                        var def = $.Deferred();
                        def.reject(theUILang.fDiagArchive + ' - ' + hasError, archive);
                        return def.promise();
                    }

                    var cPath = flm.getCurrentPath();

                    return flm.api.createArchive(flm.manager.stripJailPath(archive), flm.manager.getFullPaths(files), options)
                        .done(function (response) {
                            flm.Refresh(cPath);
                            return response;
                        });
                };
            }

            dialogs.onStart(function () {
                return flm.manager.doArchive(
                    dialogs.getTargetPath(diagId),
                    dialogs.getCheckedList(diagId),
                    {
                        type: archiveType.val(),
                        compression: compression.val(),
                        password: password.val(),
                        volumeSize: volumeSize.val(),
                        format: format.val()
                    }
                );

            });

            var updateFilePath = function (path) {
                const extensions = $.uniqueSort(Object.keys(settings)).join('|');
                const extension = archiveType.val().toLowerCase();
                let filePath = flm.utils.replaceFilePath(path.val(), path.data('previousValue'), extensions, extension);
                dialogs.updateTargetPath(diagId, filePath);
            }


            var updateCompression = function () {

                var type = archiveType.val().toLowerCase();
                $('.fman-archive-settings-rar').show();

                if (type !== 'xxx') {
                    $('.fman-archive-settings-rar').show();
                } else {
                    $('.fman-archive-settings-pass,.fman-archive-settings-rar').hide();

                    $('.fman-archive-settings-pass').show();
                }

                compression.empty();
                for (var i = 0; i < settings[type].compression.length; i++) {
                    compression.append('<option value="' + i + '">' + theUILang.fManArComp['zip'][i] + '</option>');
                }
            };

            if (!archiveType.find('option').length) {
                for (var type in settings) {
                    archiveType.append('<option value="' + type + '">' + type.toUpperCase() + '</option>');
                }
            }

            pathBrowser.change(function (event) {
                updateFilePath($(this));
            });

            archiveType.change(function () {
                updateFilePath(pathBrowser);
                updateCompression();
                var typeOpts = settings[archiveType.val().toLowerCase()];
                var pass = $(diagId + ' .fman-archive-settings-pass');

                if ($type(typeOpts['has_password']) && typeOpts['has_password'] === false) {
                    pass.hide();
                } else {
                    pass.show();
                }
            });

            updateFilePath(pathBrowser);
            updateCompression();

        })
        (window);
    </script>
{% endblock %}

